#!/bin/bash

if [ -z $OPENSHIFT_POSTGRESQL_DB_HOST ]
then
    echo 1>&2
    echo "Could not find postgresql database.  Please run:" 1>&2
    echo "rhc cartridge add -a $OPENSHIFT_APP_NAME -c postgresql-9.2" 1>&2
    echo "then make a sample commit (add whitespace somewhere) and re-push" 1>&2
    echo 1>&2
    exit 5
fi

# FIXME: ADD FUNCTION TO UPDATE WITHOUT LOSING DATA
# Confirm database exists, if not create it
#if ! /usr/bin/mysql -u "$OPENSHIFT_MYSQL_DB_USERNAME" --password="$OPENSHIFT_MYSQL_DB_PASSWORD" -h "$OPENSHIFT_MYSQL_DB_HOST" -P "$OPENSHIFT_MYSQL_DB_PORT" -e "show tables;" openshift_mediawiki > /dev/null 2>&1
#then
#    echo
#    echo "Database not found!  Creating and importing"
#    echo
#    /usr/bin/mysqladmin -u "$OPENSHIFT_MYSQL_DB_USERNAME" --password="$OPENSHIFT_MYSQL_DB_PASSWORD" -h "$OPENSHIFT_MYSQL_DB_HOST" -P "$OPENSHIFT_MYSQL_DB_PORT" create "openshift_mediawiki" 
#    /usr/bin/mysql -u "$OPENSHIFT_MYSQL_DB_USERNAME" --password="$OPENSHIFT_MYSQL_DB_PASSWORD" -h "$OPENSHIFT_MYSQL_DB_HOST" -P "$OPENSHIFT_MYSQL_DB_PORT" openshift_mediawiki < "$OPENSHIFT_REPO_DIR/.openshift/action_hooks/openshift.sql"
#    echo
#    echo "done."
#    echo "=================================================="
#    echo "  Wiki-Admin login: admin"
#    echo "  Wiki-Admin password: OpenShiftAdmin"
#    echo "  Don't forget to change your wiki admin password!"
#    echo "=================================================="
#else
#    echo "Database found, skipping build"
#fi


cd $OPENSHIFT_REPO_DIR/lqfb/liquid_feedback_core-v2.2.1
make
mkdir $OPENSHIFT_REPO_DIR/liquid_feedback_core
cp core.sql lf_update $OPENSHIFT_REPO_DIR/liquid_feedback_core/

cd $OPENSHIFT_REPO_DIR/liquid_feedback_core
createdb liquid_feedback
createlang plpgsql liquid_feedback
psql -v ON_ERROR_STOP=1 -f core.sql liquid_feedback
echo "INSERT INTO system_setting (member_ttl) VALUES ('1 year');" | psql liquid_feedback
echo "INSERT INTO contingent (polling, time_frame, text_entry_limit, initiative_limit) VALUES (false, '1 hour', 20, 6);" | psql liquid_feedback
echo "INSERT INTO contingent (polling, time_frame, text_entry_limit, initiative_limit) VALUES (false, '1 day', 80, 12);" | psql liquid_feedback
echo "INSERT INTO contingent (polling, time_frame, text_entry_limit, initiative_limit) VALUES (true, '1 hour', 200, 60);" | psql liquid_feedback
echo "INSERT INTO contingent (polling, time_frame, text_entry_limit, initiative_limit) VALUES (true, '1 day', 800, 120);" | psql liquid_feedback
echo "INSERT INTO policy (index, name, admission_time, discussion_time, verification_time, voting_time, issue_quorum_num, issue_quorum_den, initiative_quorum_num, initiative_quorum_den) VALUES (1, 'Default policy', '8 days', '15 days', '8 days', '15 days', 10, 100, 10, 100);" | psql liquid_feedback
echo "INSERT INTO unit (name) VALUES ('Our organization');" | psql liquid_feedback
echo "INSERT INTO area (unit_id, name) VALUES (1, 'Default area');" | psql liquid_feedback
echo "INSERT INTO allowed_policy (area_id, policy_id, default_policy) VALUES (1, 1, TRUE);" | psql liquid_feedback
